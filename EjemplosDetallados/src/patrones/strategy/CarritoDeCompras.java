package patrones.strategy;
// 3. Contexto - La clase que usa la estrategia
class CarritoCompras {
    private double total;
    private EstrategiaPago estrategiaPago; // La estrategia actual

    public CarritoCompras() {
        this.total = 0.0;
    }

    /**
     * Agrega un item al carrito
     */
    public void agregarItem(String nombre, double precio) {
        total += precio;
        System.out.println("‚ûï Agregado: " + nombre + " - $" +
                String.format("%.2f", precio));
    }

    /**
     * Establece la estrategia de pago a usar
     * Este m√©todo permite cambiar la estrategia en tiempo de ejecuci√≥n
     */
    public void establecerEstrategiaPago(EstrategiaPago estrategia) {
        this.estrategiaPago = estrategia;
        System.out.println("üíº M√©todo de pago seleccionado: " +
                estrategia.obtenerNombre());
    }

    /**
     * Procesa el pago usando la estrategia actual
     */
    public void pagar() {
        if (estrategiaPago == null) {
            System.out.println("‚ùå Error: No se ha seleccionado un m√©todo de pago");
            return;
        }

        if (total <= 0) {
            System.out.println("‚ùå Error: El carrito est√° vac√≠o");
            return;
        }

        System.out.println("\nüõí Total a pagar: $" + String.format("%.2f", total));
        System.out.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

        // Delega el procesamiento a la estrategia seleccionada
        boolean exito = estrategiaPago.procesarPago(total);

        if (exito) {
            System.out.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
            System.out.println("üéâ ¬°Compra completada exitosamente!");
            total = 0.0; // Vaciar el carrito
        }
    }

    public double obtenerTotal() {
        return total;
    }
}
